// Online C++ compiler to run C++ program online
#include <bits/stdc++.h>

class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node (int val): val(val), left(nullptr), right(nullptr) {}
};

class bst {
public:
  void insert (Node** root, int val) {
      if (*root == nullptr) {
          *root = new Node(val);
      } else if (val > (*root)->val) {
          insert(&(*root)->right, val);
      } else {
          insert(&(*root)->left, val);
      }
  }
  
  void preOrderInOrderPostOrderTraversal(Node* root) {
      std::stack<std::pair<Node*, int>> st;
      st.push({root, 1}); // Index starts from 1
      std::vector<int> pre, post, inOrder;
      while (!st.empty()) {
          if (st.top().second == 1) { // Preorder DLR
              st.top().second++; // increment the index
              pre.push_back(st.top().first->val);
              if (st.top().first->left) {
                  st.push({st.top().first->left, 1}); // Add the left
              }
          } else if (st.top().second == 2) { // Inorder LDR
              st.top().second++; // increment the index
              inOrder.push_back(st.top().first->val);
              if (st.top().first->right) {
                  st.push({st.top().first->right, 1}); // Add the right
              }
          } else if (st.top().second == 3) { //Post LRD
              post.push_back(st.top().first->val);
              st.pop();
          }
      }
      std::cout << "pre" << std::endl;
      for (auto &val : pre) {
          std::cout << val << "->";
      }
      std::cout << std::endl << "post" << std::endl;
      for (auto &val : post) {
          std::cout << val << "->";
      }
      std::cout << std::endl << "inorder" << std::endl;
      for (auto &val : inOrder) {
          std::cout << val << "->";
      }
  }
};
int main() {
    Node* root = nullptr;
    bst bst;
    std::vector<int> arr = {4, 2, 6, 1, 3, 5, 7};
    for (int a : arr) {
        
        bst.insert(&root, a);
    }
    std::cout << "Insert completed " << std::endl;
    bst.preOrderInOrderPostOrderTraversal(root);
    return 0;
}
